create database attendance_manager;
use attendance_manager;
CREATE TABLE employee (
    id SERIAL PRIMARY KEY,
    employee_id CHAR(6) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    last_login TIMESTAMP NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    username VARCHAR(150) UNIQUE NOT NULL,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    date_joined TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE,
    is_super BOOLEAN DEFAULT FALSE,
    is_staff BOOLEAN DEFAULT FALSE
);


CREATE TABLE employee_activity (
    id SERIAL PRIMARY KEY,
    emp_id CHAR(6) NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    activity ENUM('check-in', 'check-out') NOT NULL,
    FOREIGN KEY (emp_id) REFERENCES employee (employee_id) ON DELETE CASCADE
);

CREATE TABLE qr_details (
    id SERIAL PRIMARY KEY,
    unique_number VARCHAR(255) UNIQUE NOT NULL,
    usage_type ENUM('check-in', 'check-out') NOT NULL,
    is_valid BOOLEAN DEFAULT TRUE,
    create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE token_blacklist_outstandingtoken (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    token TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP NOT NULL,
    employee_id CHAR(6) NOT NULL,  -- Changed from user_id to employee_id
    jti VARCHAR(255) NOT NULL UNIQUE,
    FOREIGN KEY (employee_id) REFERENCES employee(employee_id) ON DELETE CASCADE
);

CREATE TABLE token_blacklist_blacklistedtoken (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    blacklisted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    token_id BIGINT NOT NULL UNIQUE,
    FOREIGN KEY (token_id) REFERENCES token_blacklist_outstandingtoken(id) ON DELETE CASCADE
);

ALTER TABLE token_blacklist_outstandingtoken 
MODIFY COLUMN created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
MODIFY COLUMN expires_at DATETIME NOT NULL;

ALTER TABLE token_blacklist_blacklistedtoken 
MODIFY COLUMN blacklisted_at DATETIME DEFAULT CURRENT_TIMESTAMP;

CREATE TABLE office_location (
    id SERIAL PRIMARY KEY,       -- Unique identifier for each location
    latitude DECIMAL(9, 6) NOT NULL,  -- Latitude with up to 6 decimal places
    longitude DECIMAL(9, 6) NOT NULL, -- Longitude with up to 6 decimal places
    is_valid BOOLEAN DEFAULT TRUE    -- Indicates if the location is active or not
);

CREATE TABLE worked_hours (
    id SERIAL PRIMARY KEY,
    employee_id CHAR(6) NOT NULL,
    work_date DATE NOT NULL,  -- Store the date for which the hours are worked
    worked_hours DECIMAL(5,2) NOT NULL,  -- Store worked hours as a decimal (e.g., 8.5 hours)
    FOREIGN KEY (employee_id) REFERENCES employee (employee_id) ON DELETE CASCADE
);

-- First, create holidays table
CREATE TABLE holidays (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    date DATE NOT NULL,
    description TEXT,
    is_company_holiday BOOLEAN DEFAULT TRUE
);

-- Then leave_types with BIGINT
CREATE TABLE leave_types (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    description TEXT,
    max_days_per_year INTEGER NOT NULL
);

-- Then leave_balances with matching BIGINT
CREATE TABLE leave_balances (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    employee_id CHAR(6) NOT NULL,
    leave_type_id BIGINT NOT NULL,
    year INTEGER NOT NULL,
    balance DECIMAL(5,2) NOT NULL,
    used DECIMAL(5,2) DEFAULT 0,
    FOREIGN KEY (employee_id) REFERENCES employee(employee_id) ON DELETE CASCADE,
    FOREIGN KEY (leave_type_id) REFERENCES leave_types(id) ON DELETE CASCADE
);

-- Finally leave_requests with matching BIGINT
CREATE TABLE leave_requests (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    employee_id CHAR(6) NOT NULL,
    leave_type_id BIGINT NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    reason TEXT NOT NULL,
    status VARCHAR(10) DEFAULT 'pending',
    applied_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    approved_by CHAR(6),
    response_on TIMESTAMP,
    response_note TEXT,
    FOREIGN KEY (employee_id) REFERENCES employee(employee_id) ON DELETE CASCADE,
    FOREIGN KEY (leave_type_id) REFERENCES leave_types(id) ON DELETE CASCADE,
    FOREIGN KEY (approved_by) REFERENCES employee(employee_id) ON DELETE SET NULL
);

ALTER TABLE employee 
ADD COLUMN last_activity TIMESTAMP NULL;